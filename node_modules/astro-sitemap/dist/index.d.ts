import type { AstroIntegration } from 'astro';
import type { SitemapItemLoose as SitemapItemLooseBase, LinkItem as LinkItemBase, EnumChangefreq } from 'sitemap';
export type LinkItem = LinkItemBase;
export { EnumChangefreq } from 'sitemap';
export type SitemapItemLoose = SitemapItemLooseBase;
export type SitemapItem = Pick<SitemapItemLoose, 'url' | 'lastmod' | 'changefreq' | 'priority' | 'links'>;
export interface NSArgs {
    news: boolean;
    video: boolean;
    xhtml: boolean;
    image: boolean;
    custom?: string[];
}
export type SitemapOptions = {
    canonicalURL?: string;
    customPages?: string[];
    filter?(page: string): boolean;
    exclude?: string[];
    i18n?: {
        defaultLocale: string;
        locales: Record<string, string>;
    };
    entryLimit?: number;
    lastmodDateOnly?: boolean;
    xslUrl?: string;
    xmlns?: NSArgs;
    changefreq?: EnumChangefreq;
    lastmod?: Date;
    priority?: number;
    serialize?(item: SitemapItem): SitemapItemLoose | undefined | Promise<SitemapItemLoose | undefined>;
    createLinkInHead?: boolean;
} | undefined;
declare const createSitemapIntegration: (options?: SitemapOptions) => AstroIntegration;
export default createSitemapIntegration;
