---
// Component configuration
interface MediaItem {
  src: string;
  alt?: string;
  type: 'image' | 'video';
}

interface Props {
  items: MediaItem[];
}

const { items = [] } = Astro.props;
---

<div class="media-slider-wrapper">
  <!-- Content Container -->
  <div class="content-container">
    <slot /> <!-- Your variable content goes here -->
  </div>

  <!-- Media Slider Container -->
  <div id="media-slider-container">
    <div class="media-layer-container">
      <!-- All Media Layers -->
      {items.map((item, index) => (
        <div 
          class="media-layer"
          style={`
            opacity: ${index === 0 ? 1 : 0};
            z-index: ${index + 1};
            transition: opacity 0.3s ease;
          `}
          data-index={index}
        >
          {item.type === 'image' ? (
            <img 
              src={item.src} 
              alt={item.alt || ''} 
              class="media-element"
            />
          ) : (
            <video
              src={item.src}
              class="media-element"
              muted
              loop
              autoplay
            />
          )}
        </div>
      ))}
    </div>

    <!-- Slider Control -->
    <div class="slider-control">
      <input 
        type="range" 
        min="0" 
        max={items.length > 1 ? items.length - 1 : 0} 
        value="0"
        step="0.01"
        class="blend-slider"
        aria-label="Blend between media items"
      />
    </div>
  </div>
</div>

<style is:global>
  .media-slider-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    min-height: 400px;
    margin: 25px 0px;
  }

  .content-container {
    position: relative;
    z-index: 20; /* Above the slider */
    width: 100%;
  }

  #media-slider-container {
    position: relative;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10; /* Below the content */
  }

  .media-layer-container {
    position: relative;
    top: 0;
    left: 0;
    width: 100%;
    height: 50vw;
    max-height: 375px;
  }

  .media-element {
    position: absolute;
    width: 100%;
    max-height: 350px;
    top: 0;
    left: 0;
    object-fit: contain;
  }

  .slider-control {
    position: relative;
    left: 50%;
    transform: translateX(-50%);
    width: 80%;
    z-index: 15; /* Between content and media */
  }

  .blend-slider {
    width: 100%;
    cursor: pointer;
    height: 8px;
    -webkit-appearance: none;
    appearance: none;
    background: rgba(255, 255, 255, 0.2);
    outline: none;
    border-radius: 4px;
  }

  .blend-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--md-sys-color-primary);
    cursor: pointer;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('media-slider-container');
    if (!container) return;

    const slider = container.querySelector('.blend-slider');
    const layers = container.querySelectorAll('.media-layer');
    const totalItems = layers.length;

    if (totalItems < 2) {
      if (slider) slider.style.display = 'none';
      return;
    }

    function updateLayers(value) {
      const currentIndex = Math.floor(value);
      const nextIndex = (currentIndex + 1) % totalItems;
      const blendAmount = value - currentIndex;

      // Update layer opacities
      layers.forEach((layer, index) => {
        if (index === currentIndex) {
          layer.style.opacity = 1 - blendAmount;
        } else if (index === nextIndex) {
          layer.style.opacity = blendAmount;
        } else {
          layer.style.opacity = 0;
        }
      });
    }

    // Slider event
    slider.addEventListener('input', (e) => {
      updateLayers(parseFloat(e.target.value));
    });

    // Initialize
    updateLayers(0);
  });
</script>