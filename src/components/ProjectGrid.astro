---
import { getCollection } from 'astro:content';

const allProjects = (await getCollection('blog'))
  .filter(project => !project.data.tags?.includes('hidden'))
  .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

const allTags = [...new Set(allProjects.flatMap(project => project.data.tags || []))]
  .filter(tag => tag !== 'hidden');
---

<div id="project-app" class="portfolio-container" data-projects={JSON.stringify(allProjects)}>
  <!-- Tag Filter -->
  <div id="tag-filter" class="tag-filter">
    <button class="tag active" data-tag="">All</button>
    {allTags.map(tag => (
      <button class="tag" data-tag={tag}>{tag}</button>
    ))}
  </div>

  <!-- Project Grid (populated by JS) -->
  <div id="project-grid" class="project-grid"></div>

  <!-- Pagination Controls -->
  <div id="pagination" class="pagination"></div>
</div>
<style is:global>
  .portfolio-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }

  .tag-filter {
    display: flex;
    justify-content: center;
    gap: 0.75rem;
    padding: 1rem 0;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
  }

  .tag {
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    text-decoration: none;
    font-size: 0.9rem;
    transition: all 0.2s ease;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .tag:hover {
    cursor: pointer;
    background: rgba(255, 255, 255, 0.2);
  }

  .tag.active {
    background: white;
    color: black;
  }

  .project-grid {
    display: flex;
    max-width: 1200px;
    justify-content: center;
    align-items: center;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 2rem;
  }

  .project-card {
    text-decoration: none;
    color: white;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 1rem;
    overflow: hidden;
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    width: 300px;
    height: 350px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .project-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    border-color: rgba(255, 255, 255, 0.3);
  }

  .card-image-container {
    aspect-ratio: 16/9;
    overflow: hidden;
  }

  .card-image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .project-card:hover .card-image-container img {
    transform: scale(1.05);
  }

  .card-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .project-card h2 {
    margin: 0 0 0.75rem 0;
    font-size: 1.25rem;
  }

  .project-card h3 {
    margin: 0 0 0.75rem 0;
    font-size: 1rem;
    font-weight: 400;
    color: rgba(255, 255, 255, 0.4);
  }

  .description {
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 1rem;
    font-size: 0.95rem;
    line-height: 1.5;
    flex-grow: 1;
  }

  .project-tags {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    flex-wrap: wrap;
  }

  .tag-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 2rem;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    font-size: 0.75rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-top: 2rem;
    padding: 1rem;
  }

  .pagination-button {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    text-decoration: none;
    transition: all 0.2s ease;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .pagination-button:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .page-info {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
  }

  @media (max-width: 768px) {
    .project-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
      gap: 1.5rem;
    }
  }

  @media (max-width: 480px) {
    .project-grid {
      grid-template-columns: repeat(3, 1fr);
    }

    .tag-filter {
      gap: 0.5rem;
    }

    .tag {
      padding: 0.4rem 0.8rem;
      font-size: 0.8rem;
    }

    .pagination {
      gap: 0.5rem;
    }
    
    .pagination-button {
      padding: 0.4rem 0.8rem;
      font-size: 0.8rem;
    }
    
    .page-info {
      font-size: 0.8rem;
    }
  }
</style>

<!-- Client Script -->
<script>

const state = {
  projects: [],
  filtered: [],
  activeTag: '',
  currentPage: 1,
  itemsPerPage: 12
};

const app = document.getElementById('project-app');
state.projects = JSON.parse(app.dataset.projects);
state.filtered = [...state.projects];

const grid = document.getElementById('project-grid');
const pagination = document.getElementById('pagination');
const tagFilter = document.getElementById('tag-filter');

function renderProjects() {
  const start = (state.currentPage - 1) * state.itemsPerPage;
  const paginated = state.filtered.slice(start, start + state.itemsPerPage);
  grid.innerHTML = paginated.map(project => `
    <a href="/blog/${project.slug}/" class="project-card">
      <div class="card-image-container">
        <img src="/blog/${project.slug}/cover.jpg" alt="${project.data.title}" loading="lazy" />
      </div>
      <div class="card-content">
        <h2>${project.data.title}</h2>
        <h3>${new Date(project.data.date).getFullYear()}</h3>
        <p class="description">${project.data.description}</p>
        <div class="project-tags">
          ${(project.data.tags || []).map(tag => `<span class="tag-badge">${tag}</span>`).join('')}
        </div>
      </div>
    </a>
  `).join('');
}

function renderPagination() {
  const totalPages = Math.ceil(state.filtered.length / state.itemsPerPage);
  pagination.innerHTML = `
    ${state.currentPage > 1 ? `<a href="#" class="pagination-button" data-page="${state.currentPage - 1}">Previous</a>` : ''}
    <span class="page-info">Page ${state.currentPage} of ${totalPages}</span>
    ${state.currentPage < totalPages ? `<a href="#" class="pagination-button" data-page="${state.currentPage + 1}">Next</a>` : ''}
  `;
}

function filterByTag(tag) {
  state.activeTag = tag;
  state.currentPage = 1;
  state.filtered = tag
    ? state.projects.filter(p => (p.data.tags || []).includes(tag))
    : [...state.projects];

  document.querySelectorAll('.tag').forEach(btn => btn.classList.remove('active'));
  document.querySelector(`.tag[data-tag="${tag}"]`)?.classList.add('active');
  renderProjects();
  renderPagination();
}

// Initial render
filterByTag('');

// Tag button click handling
tagFilter.addEventListener('click', e => {
  if (e.target.matches('.tag')) {
    e.preventDefault();
    filterByTag(e.target.dataset.tag);
  }
});

// Pagination click handling
pagination.addEventListener('click', e => {
  if (e.target.matches('.pagination-button')) {
    e.preventDefault();
    state.currentPage = Number(e.target.dataset.page);
    renderProjects();
    renderPagination();
  }
});
</script>
